Javascript representation rewrites | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This file provides deep representation conversion for common Javascript constructs. Whether or not this will work for you mostly depends on what you're doing. If you are writing fairly normal
code that involves a lot of state propagation among statically-defined objects, then you'll probably get a lot of options here.

Representation primitives.
This representation layer automates the process of destructuring and conversion. Particularly, it defines a new symmetric, non-normalizing equivalence relation that allows you to collapse the
space of values. Values are simply Mulholland expressions; these are converted into Javascript representations and the equivalence relation is expressed as a normalization-agnostic series of
conversions between representations.

Side-effecting representations.
Not all representations operate in value-space. Some are edge-triggered side-effects; this is particularly common within the DOM. In this case, the isomorphism is defined with respect to its
differential: its state is considered to be the integral of its side effects. For example:

| \âˆ«jsr text _x + text _y = text _y


