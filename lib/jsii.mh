Javascript high-level interfacing | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
Mulholland's jsi is a low-level interface that's difficult to use. This is a high-level interface that makes it tolerable to write Javascript code in Mulholland (and use syntactic expansions
in the process). It relies on the tree reflection library.

_x@0.@commas      = _x;
_xs _x -. @commas = _xs.@commas -, _x;

_xs :> _y         = function.@cons2 _xs.@commas.@group {/return _y};

_x ? _y : _z      = '?'.@unquote.@cons3 _x _y _z;
_x <: _y          = '@='.@unquote.@cons2 _x _y;

Return identities.
In general, 'return' distributes over various kinds of statements and conditionals.

/return /return _x     = /return _x;        /return (_x ? _y : _z) = if.@cons3 _x.@group {/return _y} $ /else {/return _z};
-return _x /; _y       = _x -; /return _y;  /return (_x, _y)       = _x -; /return _y;

Simplification of linear values.
These are high-level simplifications that are often useful when dealing with generated values.

(_x _xs :> _y)(_arg, _args) = /return (-var _x /= _arg; (_xs :> _y) _args);  (_x :> _y).call  (_this,  _args)  = (receiver _x :> _y)(_this, _args);
(_x@0 :> _y) _arg           = /return (-var _x /= _arg; _y);                 (_x :> _y).apply (_this, [_args]) = (receiver _x :> _y)(_this, _args)
