Javascript high-level interfacing | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
Mulholland's jsi is a low-level interface that's difficult to use. This is a high-level interface that makes it tolerable to write Javascript code in Mulholland (and use syntactic expansions
in the process). It relies on the tree reflection library.

_x@0.@commas = _x;
_xs _x -. @commas = (_xs.@commas, _x);

_x.@paren = '('.@unquote.@cons1 _x;
_xs :> _y = function.@cons2 _xs.@commas.@paren {/return _y};

Return identities.
In general, 'return' distributes over various kinds of statements and conditionals.

/return (_x; _y) = (_x; /return _y);
/return (_x ? _y :: _z) = if.@cons2 _x.@paren $$ {/return _y} :: -else {/return _z}
