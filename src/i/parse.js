caterwaul.module( 'mulholland.parser' ,function($) {$.mulholland.parser=function() {var table= { } ;
var table_i= { } ;
var next=0;
return(function( ) {var parser=function(_) {return parse(lex(sdoc(_.toString() ) ) ) } ,syntax=$.mulholland.syntax(parser) ,statics=function() {;
return{syntax:syntax,intern:intern,extern:extern,lex:lex} } ,sdoc=function(s) {;
return(function(it) {return(it.join( '\n\n' ) ) } ) .call(this, ( (function(xs) {var x,x0,xi,xl,xr;
for(var xr=new xs.constructor() ,xi=0,xl=xs.length,x0;
xi<xl;
 ++xi)x=xs[xi] , ( /^\s*[A-Z|]/ .test(x) ) ||xr.push(x) ;
return xr} ) .call(this,s.split( /\n(?:\s*\n)+/ ) ) ) ) } ,lexer= /(#.*|(?:[_@\w\d\x7f-\uffff]|'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*")[^ \n\t\r.:,;()\[\]{}]*|[^ \n\t\r.:,;()\[\]{}][^ \n\t\r()\[\]{}]*|[()\[\]{}]|[.:,;][^ \n\t\r\d\w@]*)/ ,lex=function(s) {;
return(function(xs) {var x,x0,xi,xl,xr;
for(var xr=new xs.constructor() ,xi=0,xl=xs.length,x0;
xi<xl;
 ++xi)x=xs[xi] , ( /^[^ \n\t\r#]/ .test(x) ) &&xr.push(x) ;
return xr} ) .call(this,s.split(lexer) ) } ,intern=function(s) {;
return Object.prototype.hasOwnProperty.call(table_i,s) ?table_i[s] :table_i[table[next] =s] =next++ } ,extern=function(n) {;
return Object.prototype.hasOwnProperty.call(table,n) ?table[n] :n} ,operator_lexer=function(_) {return/^(\$*)([-\/\\|=]?)(.+)$/ .exec(_) } ,operator_splitter=function(_) {return/^[+*^<>]/ .exec(_) } ,operator_split_lexer= /\W|[\w\d\x7f-\uffff]+/ ,precedence_table= (function(xs) {var x,x0,xi,xl,xr;
for(var xr=new xs.constructor() ,xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] ,xr.push( (new RegExp( ( '^' + (x) + '' ) ) ) ) ;
return xr} ) .call(this, [ '\\.' , '#' , '[`~!]' , '[/*%]' , '[-+]' , '[\\\\:]' , '[<>]' , '&' , '[|^]' , '[=?]' , ',' , ';' , '[(\[{]' ] ) ,right_associative=function(_) {return/^[`~!\\\\:=?]/ .exec(_) } ,unary=function(_) {return/^[~!A-Za-z0-9]/ .exec(_) } ,is_value=function(_) {return/^['"_@A-Za-z0-9\x7f-\uffff]/ .exec(_) } ,base_precedence=function(t) {;
return(function(xs) {var x,x0,xi,xl,xr;
for(var x=xs[0] ,xi=0,xl=xs.length,x1;
xi<xl;
 ++xi) {x=xs[xi] ;
if(x1= (x.test(t) &&xi+1) )return x1}return false} ) .call(this,precedence_table) } ,is_closer=function(t) {;
return t=== '?:' ?12: ( ')]}' ) .indexOf(t) +13} ,is_opener=function(t) {;
return/^\?/ .test(t) ?8: ( '([{' ) .indexOf(t) +9} ,destructure=function(t) {;
return is_value(t) ? {f:0,p:0,id:intern(t) } :destructure_operator(t) } ,destructure_operator=function(t) {;
return(function( ) {var pieces=operator_lexer(t) ,base=pieces[2] ||pieces[3] ,adjustment=pieces[1] .length<<2,canonical=pieces[2] ===pieces[3] ?pieces[2] +pieces[3] :pieces[3] ;
return( {f:is_opener(base) ||is_closer(base) ||right_associative(base) |unary(base) <<1,p:adjustment+base_precedence(base) ,id:intern(canonical) } ) } ) .call(this) } ,parse=function(ts) {;
return(function( ) {var expect_value=true,values= [ ] ,operators= [ ] ,top=function() {;
return operators[operators.length-1] } ,join=destructure( '#' ) ,apply_unary=function() {;
return(function( ) {var x=values.pop() ;
return( (values) .push(new syntax(operators.pop() .id, [x] ) ) ) } ) .call(this) } ,apply_binary=function() {;
return(function( ) {var x=values.pop() ,y=values.pop() ;
return( (values) .push(new syntax(operators.pop() .id, [y,x] ) ) ) } ) .call(this) } ,apply_ternary=function() {;
return(function( ) {var x=values.pop() ,y=values.pop() ,z=values.pop() ;
return( (values) .push(new syntax(operators.pop() .id, [z,y,x] ) ) ) } ) .call(this) } ,apply=function() {var v=top() .f;
return v===24?apply_ternary() :v&2?apply_unary() :apply_binary() } ,apply_until=function(f) {;
return(function(xs) {var x,x0,xi,xl,xr;
for(var x=xs,xi=0,x0,xl;
x0= (operators.length&& !f(top() ) ) ;
 ++xi)x= (apply() ) ;
return x} ) .call(this,null) } ,apply_operator=function(t) {;
return apply_until(t.f&1?function(_) {return _.f&8||_.p>=t.p} :function(_) {return _.f&8||_.p>t.p} ) } ,maybe_join=function() {;
return( (expect_value=== (expect_value=false) ) && (observe_op(join) ) ) } ,observe=function(t) {;
return t.f?observe_operator(t) :observe_value(t) } ,observe_value=function(t) {;
return( (maybe_join() ) , ( (values) .push(new syntax(t.id) ) ) ) } ,observe_operator=function(t) {;
return t.f&8?t.f&4?observe_closer(t) :observe_opener(t) :t.f&2?observe_vop(t) :observe_op(t) } ,observe_opener=function(t) {;
return t.f===8?observe_op(t) :observe_vop(t) } ,observe_closer=function(t) {;
return t.f===12?close_ternary(t) : ( (apply_until(opener) ) , (expect_value=false) ) } ,observe_vop=function(t) {;
return( (maybe_join() ) , (observe_op(t) ) ) } ,observe_op=function(t) {;
return( ( ( (apply_operator(t) ) , ( (operators) .push(t) ) ) ) , (expect_value=true) ) } ,close_ternary=function(t) {;
return( (apply_until(opens_ternary) ) , (expect_value=true,top() .f|=16) ) } ,opens_ternary=function(t) {;
return f===8} ,opener=function(t) {var f=t.f;
return f&8&& ! (f&4) } ,apply_all=function() {;
return( (apply_until(function(_) {return false} ) ) , (values[0] ) ) } ;
return( (function(it) {return(apply_all() ) } ) .call(this, ( (function(xs) {var x,x0,xi,xl,xr;
for(var xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] , ( (observe) .call( {x0:x0,xi:xi,xl:xl,xs:xs,xr:xr} ,x) ) ;
return xs} ) .call(this, (function(xs) {var x,x0,xi,xl,xr;
for(var xr=new xs.constructor() ,xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] ,xr.push( ( (destructure) .call( {x0:x0,xi:xi,xl:xl,xs:xs,xr:xr} ,x) ) ) ;
return xr} ) .call(this,ts) ) ) ) ) } ) .call(this) } ;
return($.merge(parser,statics() ) ) } ) .call(this) } } ) ;
